<#@ template    language    ="C#" #>
<#@ assembly    name        ="System.Core" #>
<#@ import      namespace   ="System.Linq" #>
<#@ import      namespace   ="System.Collections.Generic" #>
<#@ import      namespace   ="System.Collections" #>
<#@ assembly    name        ="System.Text.RegularExpressions" #>
<#@ import      namespace   ="System.Text.RegularExpressions" #>
<#@ assembly    name        ="System.Globalization" #>
<#@ import      namespace   ="System.Globalization" #><#+

public static string GetMappingName(string name)
{
    string result = Regex.Replace(name, @"(?<=\p{Ll})(\p{Lu})", "$1");
    result = Regex.Replace(result, @"[^\w]+", "");
    result = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result);
    result = result.Replace(" ", "");
    return result;
}

public static string GetNetName(string name)
{
    string safeName = Regex.Replace(name, @"\W+", " ");
    safeName = Regex.Replace(safeName, @"\b(\w)(\w*)", match => match.Groups[1].Value.ToUpper() + match.Groups[2].Value);
    safeName = new string(safeName.Where(char.IsLetterOrDigit).ToArray());
    return safeName;
}

public static string GetRestName(string name, string schema = null)
{
    string fullName = (schema is null) ? name : $"{schema}.{name}";
    string safeName = Regex.Replace(fullName, @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lm}\p{Lo}\p{Nd}\p{Nl}\p{Pc}\p{Cf}]", "");
    safeName = Uri.EscapeDataString(safeName.ToLower());
    return safeName;
}

public enum DboType 
{ 
    Table, 
    View, 
    Procedure 
}

public class DboInfo
{
    public string Schema;
    public string Name;
    public string CsharpName => GetNetName(Name);
    public string Source => $"[{Schema}].[{Name}]";
    public string Label;
    public DboType Type;
    public string RestPath;
    public string FieldMap;
    public IEnumerable<ParameterInfo> Parameters;
    public IEnumerable<ColumnInfo> Columns;
    public IEnumerable<ColumnInfo> KeyColumns => Columns.Where(x => x.IsKey || x.MaybeKey).Distinct();
}

public class ParameterInfo
{
    public string Name;
    public string CsharpName => GetNetName(Name);
    public string JsonName => GetMappingName(Name);
    public string NetType;
}

public class ColumnInfo
{
    public string Name;
    public string CsharpName => GetNetName(Name);
    public string JsonName => GetMappingName(Name);
    public string NetType;
    public bool IsKey;
    public bool MaybeKey;
    public bool IsComputed;
}

#>